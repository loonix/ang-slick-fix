/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { booleanFilterCondition } from './booleanFilterCondition';
import { dateFilterCondition } from './dateFilterCondition';
import { dateIsoFilterCondition } from './dateIsoFilterCondition';
import { dateUsShortFilterCondition } from './dateUsShortFilterCondition';
import { dateUsFilterCondition } from './dateUsFilterCondition';
import { dateUtcFilterCondition } from './dateUtcFilterCondition';
import { collectionSearchFilterCondition } from './collectionSearchFilterCondition';
import { numberFilterCondition } from './numberFilterCondition';
import { objectFilterCondition } from './objectFilterCondition';
import { stringFilterCondition } from './stringFilterCondition';
import { FieldType } from '../models/index';
/** @type {?} */
export var executeMappedCondition = (/**
 * @param {?} options
 * @return {?}
 */
function (options) {
    // when using a multi-select ('IN' operator) we will not use the field type but instead go directly with a collection search
    /** @type {?} */
    var operator = options && options.operator && options.operator.toUpperCase();
    if (operator === 'IN' || operator === 'NIN' || operator === 'IN_CONTAINS' || operator === 'NIN_CONTAINS') {
        return collectionSearchFilterCondition(options);
    }
    // execute the mapped type, or default to String condition check
    switch (options.fieldType) {
        case FieldType.boolean:
            return booleanFilterCondition(options);
        case FieldType.date:
            return dateFilterCondition(options);
        case FieldType.dateUtc:
            return dateUtcFilterCondition(options);
        case FieldType.dateIso:
            return dateIsoFilterCondition(options);
        case FieldType.dateUs:
        case FieldType.dateTimeUs:
            return dateUsFilterCondition(options);
        case FieldType.dateUsShort:
        case FieldType.dateTimeUsShort:
            return dateUsShortFilterCondition(options);
        case FieldType.number:
            return numberFilterCondition(options);
        case FieldType.object:
            return objectFilterCondition(options);
        case FieldType.string:
        default:
            return stringFilterCondition(options);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlY3V0ZU1hcHBlZENvbmRpdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZmlsdGVyLWNvbmRpdGlvbnMvZXhlY3V0ZU1hcHBlZENvbmRpdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbEUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDMUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHbEUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDcEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUU1QyxNQUFNLEtBQU8sc0JBQXNCOzs7O0FBQW9CLFVBQUMsT0FBOEI7OztRQUU5RSxRQUFRLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUU7SUFDOUUsSUFBSSxRQUFRLEtBQUssSUFBSSxJQUFJLFFBQVEsS0FBSyxLQUFLLElBQUksUUFBUSxLQUFLLGFBQWEsSUFBSSxRQUFRLEtBQUssY0FBYyxFQUFFO1FBQ3hHLE9BQU8sK0JBQStCLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDakQ7SUFFRCxnRUFBZ0U7SUFDaEUsUUFBUSxPQUFPLENBQUMsU0FBUyxFQUFFO1FBQ3pCLEtBQUssU0FBUyxDQUFDLE9BQU87WUFDcEIsT0FBTyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxLQUFLLFNBQVMsQ0FBQyxJQUFJO1lBQ2pCLE9BQU8sbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdEMsS0FBSyxTQUFTLENBQUMsT0FBTztZQUNwQixPQUFPLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3pDLEtBQUssU0FBUyxDQUFDLE9BQU87WUFDcEIsT0FBTyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6QyxLQUFLLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDdEIsS0FBSyxTQUFTLENBQUMsVUFBVTtZQUN2QixPQUFPLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLEtBQUssU0FBUyxDQUFDLFdBQVcsQ0FBQztRQUMzQixLQUFLLFNBQVMsQ0FBQyxlQUFlO1lBQzVCLE9BQU8sMEJBQTBCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDN0MsS0FBSyxTQUFTLENBQUMsTUFBTTtZQUNuQixPQUFPLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLEtBQUssU0FBUyxDQUFDLE1BQU07WUFDbkIsT0FBTyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QyxLQUFLLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDdEI7WUFDRSxPQUFPLHFCQUFxQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ3pDO0FBQ0gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYm9vbGVhbkZpbHRlckNvbmRpdGlvbiB9IGZyb20gJy4vYm9vbGVhbkZpbHRlckNvbmRpdGlvbic7XHJcbmltcG9ydCB7IGRhdGVGaWx0ZXJDb25kaXRpb24gfSBmcm9tICcuL2RhdGVGaWx0ZXJDb25kaXRpb24nO1xyXG5pbXBvcnQgeyBkYXRlSXNvRmlsdGVyQ29uZGl0aW9uIH0gZnJvbSAnLi9kYXRlSXNvRmlsdGVyQ29uZGl0aW9uJztcclxuaW1wb3J0IHsgZGF0ZVVzU2hvcnRGaWx0ZXJDb25kaXRpb24gfSBmcm9tICcuL2RhdGVVc1Nob3J0RmlsdGVyQ29uZGl0aW9uJztcclxuaW1wb3J0IHsgZGF0ZVVzRmlsdGVyQ29uZGl0aW9uIH0gZnJvbSAnLi9kYXRlVXNGaWx0ZXJDb25kaXRpb24nO1xyXG5pbXBvcnQgeyBkYXRlVXRjRmlsdGVyQ29uZGl0aW9uIH0gZnJvbSAnLi9kYXRlVXRjRmlsdGVyQ29uZGl0aW9uJztcclxuaW1wb3J0IHsgRmlsdGVyQ29uZGl0aW9uT3B0aW9uIH0gZnJvbSAnLi8uLi9tb2RlbHMvZmlsdGVyQ29uZGl0aW9uT3B0aW9uLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IEZpbHRlckNvbmRpdGlvbiB9IGZyb20gJy4uL21vZGVscy9maWx0ZXJDb25kaXRpb24uaW50ZXJmYWNlJztcclxuaW1wb3J0IHsgY29sbGVjdGlvblNlYXJjaEZpbHRlckNvbmRpdGlvbiB9IGZyb20gJy4vY29sbGVjdGlvblNlYXJjaEZpbHRlckNvbmRpdGlvbic7XHJcbmltcG9ydCB7IG51bWJlckZpbHRlckNvbmRpdGlvbiB9IGZyb20gJy4vbnVtYmVyRmlsdGVyQ29uZGl0aW9uJztcclxuaW1wb3J0IHsgb2JqZWN0RmlsdGVyQ29uZGl0aW9uIH0gZnJvbSAnLi9vYmplY3RGaWx0ZXJDb25kaXRpb24nO1xyXG5pbXBvcnQgeyBzdHJpbmdGaWx0ZXJDb25kaXRpb24gfSBmcm9tICcuL3N0cmluZ0ZpbHRlckNvbmRpdGlvbic7XHJcbmltcG9ydCB7IEZpZWxkVHlwZSB9IGZyb20gJy4uL21vZGVscy9pbmRleCc7XHJcblxyXG5leHBvcnQgY29uc3QgZXhlY3V0ZU1hcHBlZENvbmRpdGlvbjogRmlsdGVyQ29uZGl0aW9uID0gKG9wdGlvbnM6IEZpbHRlckNvbmRpdGlvbk9wdGlvbikgPT4ge1xyXG4gIC8vIHdoZW4gdXNpbmcgYSBtdWx0aS1zZWxlY3QgKCdJTicgb3BlcmF0b3IpIHdlIHdpbGwgbm90IHVzZSB0aGUgZmllbGQgdHlwZSBidXQgaW5zdGVhZCBnbyBkaXJlY3RseSB3aXRoIGEgY29sbGVjdGlvbiBzZWFyY2hcclxuICBjb25zdCBvcGVyYXRvciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5vcGVyYXRvciAmJiBvcHRpb25zLm9wZXJhdG9yLnRvVXBwZXJDYXNlKCk7XHJcbiAgaWYgKG9wZXJhdG9yID09PSAnSU4nIHx8IG9wZXJhdG9yID09PSAnTklOJyB8fCBvcGVyYXRvciA9PT0gJ0lOX0NPTlRBSU5TJyB8fCBvcGVyYXRvciA9PT0gJ05JTl9DT05UQUlOUycpIHtcclxuICAgIHJldHVybiBjb2xsZWN0aW9uU2VhcmNoRmlsdGVyQ29uZGl0aW9uKG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLy8gZXhlY3V0ZSB0aGUgbWFwcGVkIHR5cGUsIG9yIGRlZmF1bHQgdG8gU3RyaW5nIGNvbmRpdGlvbiBjaGVja1xyXG4gIHN3aXRjaCAob3B0aW9ucy5maWVsZFR5cGUpIHtcclxuICAgIGNhc2UgRmllbGRUeXBlLmJvb2xlYW46XHJcbiAgICAgIHJldHVybiBib29sZWFuRmlsdGVyQ29uZGl0aW9uKG9wdGlvbnMpO1xyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZTpcclxuICAgICAgcmV0dXJuIGRhdGVGaWx0ZXJDb25kaXRpb24ob3B0aW9ucyk7XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVXRjOlxyXG4gICAgICByZXR1cm4gZGF0ZVV0Y0ZpbHRlckNvbmRpdGlvbihvcHRpb25zKTtcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVJc286XHJcbiAgICAgIHJldHVybiBkYXRlSXNvRmlsdGVyQ29uZGl0aW9uKG9wdGlvbnMpO1xyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVVzOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVRpbWVVczpcclxuICAgICAgcmV0dXJuIGRhdGVVc0ZpbHRlckNvbmRpdGlvbihvcHRpb25zKTtcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVVc1Nob3J0OlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVRpbWVVc1Nob3J0OlxyXG4gICAgICByZXR1cm4gZGF0ZVVzU2hvcnRGaWx0ZXJDb25kaXRpb24ob3B0aW9ucyk7XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5udW1iZXI6XHJcbiAgICAgIHJldHVybiBudW1iZXJGaWx0ZXJDb25kaXRpb24ob3B0aW9ucyk7XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5vYmplY3Q6XHJcbiAgICAgIHJldHVybiBvYmplY3RGaWx0ZXJDb25kaXRpb24ob3B0aW9ucyk7XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5zdHJpbmc6XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gc3RyaW5nRmlsdGVyQ29uZGl0aW9uKG9wdGlvbnMpO1xyXG4gIH1cclxufTtcclxuIl19